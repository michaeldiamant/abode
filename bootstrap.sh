#!/bin/bash

set -euo pipefail

installPath="$HOME/opt"

removeSnap() {
  sudo apt autoremove --purge snapd
}

installFromTar() {
  local url="$1"
  local symlinkName="$2"
  local destinationDirName="$3"

  local destinationPath="${installPath}/${destinationDirName}"
  wget -qO - "$url" | tar -xzf - -C "$installPath" --one-top-level="$destinationPath" --strip-components=1

  local symlinkPath="${installPath}/$symlinkName"
  unlink "$symlinkPath" || true
  ln -s "$destinationPath" "$symlinkPath"
}

installFromZip() {
  local url="$1"
  local symlinkName="$2"
  local destinationDirName="$3"

  local destinationPath="${installPath}/${destinationDirName}"
  local downloadedFilename=$(mktemp)

  wget -q -O "$downloadedFilename" "$url"
  unzip -qo -d "$destinationPath" "$downloadedFilename"

  local symlinkPath="${installPath}/$symlinkName"
  unlink "$symlinkPath" || true
  ln -s "$destinationPath" "$symlinkPath"

  rm "$downloadedFilename"
}

installBaseApps() {
  # Chrome
  sudo apt install -y gdebi
  wget -q -N https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -P ~/Downloads
  sudo gdebi -n ~/Downloads/google-chrome-stable_current_amd64.deb
  rm -f ~/Downloads/google-chrome-stable_current_amd64.deb

  sudo apt install -y \
    curl \
    git \
    gnome-tweak-tool \
    jq \
    openconnect \
    python3-pip \
    python3-venv \
    tshark \
    vlc \
    wireshark \
    yamllint
}

installDockerEngine() {
  # Taken from https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository.
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg --yes
  echo \
    "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io
}

installPipApps() {
  pip3 install \
    pytest
}

installVim() {
  sudo apt install -y vim
  sudo update-alternatives --set editor /usr/bin/vim.basic
  echo '
"General
set number	"Show line numbers
set linebreak	"Break lines at word (requires Wrap lines)
set showbreak=+++	"Wrap-broken line prefix
set textwidth=100	"Line wrap (number of cols)
set showmatch	"Highlight matching brace
set visualbell	"Use visual bell (no beeping)

set hlsearch	"Highlight all search results
set smartcase	"Enable smart-case search
set ignorecase	"Always case-insensitive
set incsearch	"Searches for strings incrementally

set autoindent	"Auto-indent new lines
set expandtab	"Use spaces instead of tabs
set shiftwidth=2	"Number of auto-indent spaces
set smartindent	"Enable smart-indent
set smarttab	"Enable smart-tabs
set softtabstop=2	"Number of spaces per Tab

"Advanced
set ruler	"Show row and column ruler information

set undolevels=1000	"Number of undo levels
set backspace=indent,eol,start	"Backspace behaviour


"Generated by VimConfig.com' > ~/.vimrc
}

installJdk() {
  local version="$1"
  local versionNoDashes=$(echo $version | sed "s/-//g")

  installFromTar \
    "https://github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u$version/OpenJDK8U-jdk_x64_linux_hotspot_8u$versionNoDashes.tar.gz" \
    "jdk" \
    "jdk8u-$version"
}

installSbt() {
  local version="$1"

  installFromZip \
    "https://github.com/sbt/sbt/releases/download/v$version/sbt-$version.zip" \
    "sbt" \
    "sbt-$version"
}

installKubectl() {
  local version="$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)"
  mkdir -p ~/opt/kubectl-"${version}"
  wget -N "https://storage.googleapis.com/kubernetes-release/release/${version}/bin/linux/amd64/kubectl" -P ~/Downloads/kubectl-"${version}"
  rm -rf ~/opt/kubectl-"${version}"
  mv ~/Downloads/kubectl-"${version}" ~/opt/kubectl-"${version}"
  unlink ~/opt/kubectl || true
  ln -s ~/opt/kubectl-"${version}" ~/opt/kubectl
  chmod +x ~/opt/kubectl-"${version}"/kubectl
}

installHelm() {
  local version="$1"
  installFromTar \
    "https://get.helm.sh/helm-v${version}-linux-amd64.tar.gz" \
    "helm" \
    "helm-$version"
}

installIntellij() {
  local version="$1"

  installFromTar \
    "https://download.jetbrains.com/idea/ideaIC-"${version}".tar.gz" \
    "intellij" \
    "intellij-$version"
  
  echo "  
[Desktop Entry]                                                                 
Encoding=UTF-8
Name=IntelliJ IDEA
Comment=IntelliJ IDEA
Exec=/home/michael/opt/intellij/bin/idea.sh
Icon=/home/michael/opt/intellij/bin/idea.png
Terminal=false
StartupNotify=true
Type=Application
" > /tmp/idea.desktop
  sudo mv -f /tmp/idea.desktop /usr/share/applications/idea.desktop
}

installScmBreeze() {
  git clone git://github.com/scmbreeze/scm_breeze.git /tmp/.scm_breeze
  rm -rf ~/.scm_breeze
  mv /tmp/.scm_breeze ~/.scm_breeze
  ~/.scm_breeze/install.sh
}

installAwsCli() {
  local url="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
  local downloadedFilename=$(mktemp)

  wget -qN -O "$downloadedFilename" "$url"

  local extractDir=$(mktemp -d)
  unzip -qo -d "$extractDir" "$downloadedFilename"
  sudo "$extractDir/aws/install" --update

  rm "$downloadedFilename"
  rm -rf "$extractDir"
}

installTerraform() {
  local version="$1"

  installFromZip \
    "https://releases.hashicorp.com/terraform/$version/terraform_${version}_linux_amd64.zip" \
    "terraform" \
    "terraform-$version"
}

installGo() {
  local version="$1"

  installFromTar \
    "https://golang.org/dl/go"$version".linux-amd64.tar.gz" \
    "go" \
    "go-$version"
}

installTerraformDocs() {
  local version="$1"

  local destinationPath="$installPath/terraform-docs-$version"
  local downloadedFilename="terraform-docs-v$version-linux-amd64"
  wget -qP "$destinationPath" "https://github.com/terraform-docs/terraform-docs/releases/download/v$version/$downloadedFilename"
  mv "$destinationPath/$downloadedFilename" "$destinationPath/terraform-docs"

  chmod +x "$destinationPath"/terraform-docs
  unlink "$installPath"/terraform-docs || true
  ln -s "$destinationPath" "$installPath"/terraform-docs
}

configureBashExports() {
  local script_dir=$(dirname "$0")
  cp "$script_dir"/bash_exports ~/.bash_exports

  # Inspired by scm_breeze install.sh.
  local exec_string="source ~/.bash_exports"
  if grep -q "$exec_string" ~/.bashrc; then
    echo "bash_exports already added to ~/.bashrc"
  else
    printf "\n$exec_string\n" >> ~/.bashrc
    echo "bash_exports added to ~/.bashrc"
  fi
}

configureBashAliases() {
  local script_dir=$(dirname "$0")
  cp "$script_dir"/bash_aliases ~/.bash_aliases

  # Inspired by scm_breeze install.sh.
  local exec_string="source ~/.bash_aliases"
  if grep -q "$exec_string" ~/.bashrc; then
    echo "bash_aliases already added to ~/.bashrc"
  else
    printf "\n$exec_string\n" >> ~/.bashrc
    echo "bash_aliases added to ~/.bashrc"
  fi
}

configureSudoers() {
  local exec_string="michael ALL=(ALL) NOPASSWD: /usr/sbin/openconnect"
  if sudo grep -q "$exec_string" /etc/sudoers; then
    echo "openconnect NOPASSWD access already added"
  else
    # https://stackoverflow.com/a/28382838
    echo "$exec_string" | sudo EDITOR="tee -a" visudo
    echo "openconnect NOPASSWD access added"
  fi
}

configureOpenSsl() {
  # https://askubuntu.com/questions/1231799/certificate-error-after-upgrade-to-20-04/1255951#1255951
  sudo cp openssl.cnf /etc/ssl/openssl.cnf
}

installArgoRollouts() {
  wget -N https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64 -P ~/Downloads
  mkdir -p ~/opt/argo-rollouts
  mv ~/Downloads/kubectl-argo-rollouts-linux-amd64 ~/opt/argo-rollouts/kubectl-argo-rollouts
  chmod +x ~/opt/argo-rollouts/kubectl-argo-rollouts
}

installMainline() {
  sudo add-apt-repository -y ppa:cappelikan/ppa
  sudo apt update
  sudo apt install -y mainline
}

installGitXargs() {
  local version="$1"

  wget -N https://github.com/gruntwork-io/git-xargs/releases/download/v"${version}"/git-xargs_linux_amd64 -P ~/Downloads
  mkdir -p ~/opt/git-xargs-"${version}"
  mv ~/Downloads/git-xargs_linux_amd64 ~/opt/git-xargs-"${version}"/git-xargs
  unlink ~/opt/git-xargs || true
  ln -s ~/opt/git-xargs-"${version}" ~/opt/git-xargs
  chmod +x ~/opt/git-xargs/git-xargs
}

installYq() {
  local version="$1"
  local binary="yq_linux_amd64"

  rm -rf "~/opt/yq"
  mkdir -p "~/opt/yq"

  wget -q https://github.com/mikefarah/yq/releases/download/${version}/${binary} -P ~/opt/yq
  mv ~/opt/yq/${binary} ~/opt/yq/yq
  chmod +x ~/opt/yq/yq
}

mkdir -p "$installPath"

installBaseApps
installPipApps
installMainline
installVim
installDockerEngine
installJdk "265-b01"
installSbt "1.5.5"
installKubectl
installArgoRollouts
installHelm "3.3.1"
installIntellij "2021.2.3"
installScmBreeze
installAwsCli
installTerraform "1.0.2"
installTerraformDocs "0.10.1"
installGo "1.16.13"
installGitXargs "0.0.11"
installYq "v4.14.1"
configureBashAliases
configureBashExports
configureSudoers
configureOpenSsl
